/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 14.07.2021 19:42:02

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 208;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,100 } };
const TfArray<1, float> quant0_scale = { 1, { 0.029535187408328056, } };
const TfArray<1, int> quant0_zero = { 1, { -81 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[20] = { 221, -174, 1062, -159, 281, 365, 365, 532, 762, -245, 77, -50, 285, -37, 494, 249, 425, 680, 305, -293, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const TfArray<1, float> quant1_scale = { 1, { 8.8282402430195361e-05, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[10] = { 859, -16, 98, -17, -9, 315, -30, 92, -532, 580, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0001689798227744177, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[5] = { 232, -4, -410, 73, 74, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00030976222478784621, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[20*100] = { 
  -27, 0, -57, -12, -17, 51, -14, -66, -91, 6, 116, 4, -61, 28, 24, 118, 102, -32, 16, -66, 95, -34, 61, -89, -60, -24, -39, 14, -59, -33, -26, -37, -9, 40, 14, -7, -13, 23, -3, -22, 73, 98, 24, 17, -78, 46, 16, 13, -58, 4, 64, 90, -79, 25, 9, 45, 37, -27, -48, 7, 39, 6, -51, -58, -37, 9, 64, 23, -39, -46, 88, -15, -17, -26, 5, 89, 70, 44, -28, 59, 68, 49, -5, 34, 1, 40, -10, 5, -19, 46, 82, -21, -13, 25, -2, 3, 61, 1, -14, 75, 
  6, 13, 6, -25, 20, 65, 42, 66, -58, 54, 34, -41, -10, -62, -37, -35, -33, -56, 54, 38, -10, -45, -53, -38, 28, -46, 13, 40, -37, 9, 55, 63, -66, -15, -63, 61, -29, 46, 49, -31, -41, 8, 20, 0, -56, -72, 14, 2, -17, -35, 42, 68, -62, -40, 73, -16, -71, 78, -20, -51, 58, 1, -36, 40, -26, -42, 21, -45, 39, -21, -80, 33, -16, -46, 38, 4, -62, -66, 37, -70, 52, -48, -65, -78, -37, -15, -65, 55, -31, -72, 57, -9, -66, -55, -79, 57, -2, 59, -77, -74, 
  71, -102, -28, 19, 22, 81, -81, 16, -57, 53, 43, 3, -27, -13, 87, -3, -74, 7, 68, -28, 93, -38, -15, 25, -4, 98, -3, -26, 7, -19, -26, 42, -49, 49, -20, 40, 5, 14, -16, -19, 83, -38, 25, 13, -5, 34, 22, 5, 83, -55, 96, -9, 31, -54, 59, 66, 69, 28, 24, 79, 52, -66, -62, 27, 68, -27, -40, 11, 43, 94, 81, 53, -21, 81, 1, 72, -26, -18, -43, 20, 47, -3, -58, 31, 93, 105, 11, 30, -46, 55, 11, 19, -82, -17, 84, 61, 59, -31, 45, -5, 
  -90, -20, -43, 5, 5, 3, -74, 24, -18, 48, -16, -96, 21, 8, -14, -45, -5, -5, 50, 23, -71, -36, 87, -22, -26, 84, 25, -7, 40, -3, 26, 69, 13, -70, -35, 88, 24, -17, -57, -16, 43, 1, -29, 44, -67, -4, 68, -76, 48, 29, 107, -34, -53, 74, -83, 2, 44, -31, 54, -70, -29, -24, -49, 53, -61, 51, -14, -111, -68, 18, 52, -15, -37, -48, 1, -39, -68, 1, -46, 39, 57, -64, -53, -4, 37, 55, 48, -35, 41, -19, 12, -72, -11, 16, 53, -51, -77, -10, 7, 9, 
  59, 51, -3, 23, 1, 112, -51, 12, -7, 6, 64, 1, 28, -34, -71, 26, -39, 3, 2, 4, 33, -30, 3, 4, -9, -11, 66, 58, 60, 2, 31, -31, -13, 26, -33, 2, 37, 60, -71, -30, 59, -56, -20, -39, -62, 27, 78, 89, 15, 34, 67, -49, 51, -62, 59, 22, 59, -20, 6, 30, -8, 26, 11, -66, 67, 41, 22, -13, -38, -76, 13, 3, 28, -3, 7, 67, 39, 54, -15, 57, 21, 49, 75, -42, 40, 37, 10, -5, -40, 54, -8, 61, 53, -14, 70, 46, -14, 56, 81, 15, 
  5, -51, -54, 24, 34, -6, -16, -10, 38, -41, -71, -62, 49, 4, 63, -18, -54, 11, 80, 77, -60, -78, -28, 1, -39, 15, -8, -40, 59, 32, 14, 50, -9, 88, -17, 28, 1, 9, 99, -32, -23, 25, 47, 68, -11, 23, -71, 33, 23, 7, -38, -14, -32, -1, -9, 18, 0, -34, 73, 2, -41, -18, 58, 26, 18, -24, 32, 22, 29, -52, -91, -55, -48, -53, -32, -86, -5, 64, 43, 36, -83, 22, 15, 24, 78, 52, -25, 22, -33, -7, 5, 12, -61, 36, -36, -18, 14, 78, -34, 43, 
  -66, 127, -13, 7, -28, 21, 56, -18, 11, 23, -71, -27, -65, -1, 46, 0, 28, 44, 73, -35, 4, 49, 80, -5, 15, -8, 6, 31, 52, -22, 32, 23, -29, 11, -32, -32, 61, 66, 16, -31, 46, 40, -53, -40, -8, -27, 98, 77, 50, 48, -10, 32, 66, -5, -69, -5, -36, 47, 29, 5, -9, -6, 16, -3, -37, -100, 48, -23, -23, -18, -95, 54, -17, 35, -29, -66, 44, 27, 60, 9, 19, 43, -12, 9, 33, -43, 0, 74, 76, 15, -23, 29, 24, 70, -45, 19, 77, -20, 81, 82, 
  -21, 110, -106, -8, -71, 78, 44, -125, 68, -67, 55, -13, -105, -29, -49, 4, 26, -100, 9, -42, -8, -32, -91, -15, -23, -50, 75, 11, 28, 41, -41, 85, -76, -37, -1, 48, -57, 2, 23, 10, 31, -48, 28, -61, -61, 79, 48, 36, -1, -6, 92, 37, -51, 57, 25, 36, 11, 53, -25, -41, 19, 50, 11, 59, -75, 52, 52, -47, 57, -38, -44, 88, -9, 89, 36, 59, 37, 23, 89, 70, 77, 80, 11, 32, -30, 53, 72, -43, -18, 77, -33, -31, -69, -39, -34, -7, -33, -60, -33, 65, 
  56, 36, 0, -31, 43, 64, -22, -37, 81, -69, -45, 73, -10, 20, -85, -17, 7, -17, 95, -14, 23, -4, -15, -5, -46, 93, -30, 15, 82, -14, 1, 65, -39, 48, 46, 49, 22, -2, -42, 12, 43, -34, -60, 62, -33, 2, 88, 43, -46, 63, -80, -26, 33, -59, -27, -3, -44, 49, 34, 23, -4, 66, -16, 64, 68, 88, -53, 37, -4, -66, 62, -32, 60, 77, -30, 102, 60, 70, 73, 16, 7, 15, 84, -6, 62, 40, 61, 58, 57, 4, 111, 36, -41, 14, 25, 87, 42, -37, 106, -36, 
  7, 14, 9, 36, -71, -6, 0, -28, 47, -20, -8, -21, -38, 3, 1, -49, 18, 60, 60, -72, 29, -53, -14, 56, 44, -74, -33, -59, 56, 27, -81, 23, -20, -67, -24, 38, -16, 37, -16, 41, -81, -41, 18, 26, 5, -84, 45, -25, -45, 38, -36, 79, -55, 49, 39, -80, -52, -39, 22, 13, -43, -20, 61, -58, 55, 68, 74, -46, 49, 22, 17, -27, -42, 15, 21, 12, 64, 47, 35, -53, 11, -49, -32, 23, -75, 49, -18, -32, 22, -3, -48, 14, 34, -49, -46, 2, 1, -63, -27, -54, 
  -56, -75, -67, -18, 63, -43, 12, 8, 33, 43, -29, 48, 27, 65, -14, -86, -59, 61, -24, -12, -69, -20, 58, -67, -45, -3, -75, 48, 24, -71, 50, -35, -64, -5, 63, 6, -48, 12, -54, -10, -53, -24, 64, 49, 24, 23, -13, 54, -51, -82, 37, -57, -46, -16, 35, -75, -9, 76, -91, 61, -68, 0, 60, -85, -62, -64, 34, -2, -96, -48, -57, -35, -19, -56, 7, -61, -79, -37, 31, 34, 29, 49, -12, -56, -65, 21, 22, -12, 43, 44, 35, -34, 52, 6, 8, -52, 42, 24, 71, 59, 
  13, 40, -9, -14, 1, 36, -3, 49, 55, 53, -59, 18, 14, -59, -60, 1, -13, 56, 56, 39, 24, -34, 15, 28, 48, -61, -20, 83, -32, 49, -64, 40, -25, -12, 54, -53, 67, 53, 72, -31, -36, -4, -59, -60, -55, -17, -48, 17, 12, 23, -30, 1, 79, 101, 81, -51, 44, 53, -53, 34, -29, -14, 73, 19, -7, 31, 55, -18, 33, 27, -65, -42, 29, 73, -32, 2, -46, 58, -38, -33, -70, -34, 64, 73, 9, -37, 57, 108, -15, -57, -22, 74, 61, -25, -52, -79, -1, 87, 12, -35, 
  79, 3, 32, -48, 33, -3, -26, -16, -24, 49, 9, -64, -44, 47, 57, -58, 5, 8, -86, -9, -55, -53, 77, -11, -61, 24, -92, 40, 75, -30, 82, -52, 1, 73, -54, -11, -47, 20, -39, 91, 18, 1, 42, 78, 16, 2, 24, -7, 16, 44, 13, -46, -7, -15, 65, 83, 34, 13, 85, 33, -24, -70, 37, 25, -18, 69, 28, 73, 87, -74, -55, -97, 34, 4, -82, 64, -24, 37, -30, 11, 14, -8, 77, 4, -50, 51, -50, -1, 9, -17, 60, 16, -40, 48, 11, 63, -104, 62, -24, -54, 
  -12, 37, 9, -3, 0, -32, 60, 13, -30, 47, 56, 82, 57, -78, -1, 1, -3, -17, -9, 61, -90, 7, 55, -42, -60, 47, 62, 48, 59, -20, -76, 89, 64, 28, 58, 38, 77, 0, 29, -64, -14, 13, 93, -35, -27, 20, -18, 34, -12, 81, -33, -23, 24, 0, 59, 53, 36, 98, -46, -25, 0, 35, 100, 8, -2, 39, 53, 74, -57, 66, 45, -33, 28, 31, 59, -68, 45, 42, -24, 59, 4, -30, 60, -12, 30, 18, 69, -20, -55, 68, -46, 46, -21, -19, 36, -45, 20, 78, 39, 51, 
  23, -89, 93, -55, 37, 32, 16, 74, -24, -10, -13, -27, -34, -47, 27, 32, -72, -6, -42, -28, 58, -10, -31, 30, 55, 44, -76, -11, -12, 25, 51, -21, 48, 54, 77, -31, -12, -2, -53, -3, 32, -93, 49, -69, -10, 30, 14, -68, 41, 24, -21, -31, 54, 18, 9, 1, -55, 24, 26, 75, -29, 4, 7, -48, -56, 52, 5, 96, -79, -55, 97, -40, 100, -16, -8, 61, 36, 35, -25, 8, 71, -86, 5, 41, -14, 75, -29, 66, -38, -34, 49, 91, 60, -36, 50, 25, -32, -13, 17, -23, 
  -106, 111, -16, -6, 6, 32, -4, -38, -30, 70, -68, 77, -32, -23, 78, -75, 57, 43, 57, 62, -2, 41, 17, -34, -11, -45, 112, 35, 30, 23, -87, -4, -54, 62, 55, -42, 33, 63, 9, 60, 44, 20, 78, -5, -14, 22, -13, 89, -24, 70, -37, 89, 33, 42, 27, 8, 32, -20, 15, -55, 5, 17, -49, 0, 4, -7, 28, -67, -46, -4, 20, 39, 13, -28, -19, 18, 6, -41, -56, 75, -23, 104, 33, -50, -26, -111, 11, 28, 23, 74, -116, 35, 4, -46, 47, -66, -55, -22, -29, 5, 
  -87, 96, 30, 31, 28, -13, 25, -52, 11, 55, 1, -21, -57, -43, -27, 41, 71, 12, -42, 2, -26, -40, -56, 65, 47, 31, 13, -19, 76, 68, 5, 5, -36, 61, 17, 15, 8, -51, -43, 20, 10, 83, -71, -42, 11, 10, 44, 19, 74, 6, 50, 65, -45, -2, -26, 2, -52, -45, -12, -32, -37, -21, -55, 65, -7, -22, 7, -11, 9, 86, -24, -31, 8, 4, 43, -66, 78, -22, 58, 103, 42, 87, -7, -58, 47, 47, 9, -86, 33, -11, -50, 86, 27, 36, -34, -11, 105, 9, 70, 58, 
  -3, 6, -108, -38, 110, -19, 13, 16, -15, 44, 11, 58, -20, 14, 19, -22, 22, -45, 0, 98, -70, -10, 5, -18, 99, -10, -48, 39, 84, 61, 32, 7, -4, 52, -43, -83, 70, 15, -26, 43, -75, 41, -46, 88, 100, 42, 30, 79, 40, -32, -66, 40, -28, 96, 81, -92, -8, -22, 54, -56, 12, -14, 42, 70, 81, -64, -33, -36, -6, 26, 19, 39, -70, -64, 39, 27, -68, -31, 44, -63, 25, -52, -52, -72, 61, -25, 77, -96, -34, -35, -17, -73, -92, 67, 82, -69, 18, -79, 61, 40, 
  -66, -19, 74, 50, 48, 12, -23, -22, -34, -8, -83, -70, 90, -24, -26, 31, -53, 22, -92, -15, 34, -76, 2, 34, -54, -72, 58, -5, -27, -6, 41, 38, 65, -24, 27, 51, 38, -15, -1, 46, -31, -72, 12, -34, 67, 51, -45, 23, 50, 9, 7, -71, -59, -24, 41, -44, -7, 29, -66, 26, 26, -58, 79, -58, 50, 46, -91, 72, -56, 30, 34, -61, 3, -64, 62, -47, -69, -33, 30, -37, -63, 24, -17, -81, -61, -35, 3, 37, -47, 20, -14, 107, 33, -45, 23, 110, 63, 91, -13, 36, 
  -56, 10, 23, 21, 4, -29, -21, -88, 52, 56, -33, 36, -22, -32, 51, 17, -8, -78, 8, -14, -25, 11, 65, -80, 27, 67, -27, 77, -80, -97, -77, -75, 85, 37, 9, 1, 47, -25, 46, -24, -62, -44, 78, 41, -45, 7, -23, 64, -14, -88, 58, 47, -12, 2, -36, -7, 61, -53, 35, -33, 5, -55, 33, -34, -40, 44, 62, 58, 28, -50, 41, -49, 10, -18, -71, 36, 35, 19, -15, 57, -11, 64, -15, 15, -62, 62, -9, 65, -68, 51, -35, -16, 46, -59, 42, 44, 0, 88, 87, 63, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,100 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0029890583828091621, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[10*20] = { 
  -46, -4, 59, 13, 103, -53, -28, 29, -56, -91, -46, -50, 106, 98, -2, 42, -56, 45, -37, 22, 
  -60, 13, -47, 35, 22, 8, 64, -41, -33, -67, 14, -72, -22, -29, -71, -81, -39, 60, 44, -79, 
  -60, 65, 32, -67, 87, 6, 35, -62, 89, 70, -53, -57, 35, -71, 78, -15, -29, 88, -41, -19, 
  -45, -17, -63, -91, -3, 65, 90, 92, 96, -54, 104, 56, -4, -54, -33, 85, 30, 15, 61, -46, 
  12, 5, -53, -67, -92, 80, -31, -8, -56, 93, 8, -85, -78, 33, -12, 17, 15, -82, 91, 21, 
  52, 74, -69, 11, -46, -24, 26, 20, 95, -96, -93, 107, -81, 63, -75, 98, -58, 15, -92, 60, 
  102, -25, 27, 68, 91, -50, 15, 67, 58, 74, -41, 65, -89, 20, 32, -23, 38, -50, 77, -34, 
  -30, 83, -17, -69, 22, 11, -18, -96, 107, 61, 79, 91, 16, -3, 23, -55, -56, -7, -7, 65, 
  -86, 58, -20, 45, 81, 1, 63, -99, -34, -77, 53, 89, 98, 87, -19, 26, -83, 69, 6, 9, 
  -32, 27, 41, 93, -63, 74, 79, -14, 81, -27, -17, 31, -83, -25, -104, 53, 115, 127, -61, 86, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0046438025310635567, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[5*10] = { 
  -5, -9, -83, 15, -25, 82, -8, -108, 38, -19, 
  22, -85, 73, 3, 28, 6, -106, 23, -107, 33, 
  -127, 79, 33, 31, 37, -25, -13, 104, 88, -70, 
  -102, 5, 24, 42, -11, 21, 78, -90, -69, -55, 
  16, 77, 59, -48, -67, -62, 25, 79, -4, -107, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 5,10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0065733627416193485, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.036388244479894638, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.047123860567808151, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,5 } };
const TfArray<1, float> quant9_scale = { 1, { 0.085227660834789276, } };
const TfArray<1, int> quant9_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,5 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
