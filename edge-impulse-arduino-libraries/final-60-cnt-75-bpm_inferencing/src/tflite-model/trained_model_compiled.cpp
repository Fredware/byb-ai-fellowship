/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 27.07.2021 00:10:53

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 272;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,55 } };
const TfArray<1, float> quant0_scale = { 1, { 0.038371775299310684, } };
const TfArray<1, int> quant0_zero = { 1, { -106 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[20] = { 557, -282, 1517, 1461, 652, 324, 417, 906, 746, -345, -236, -138, 934, 210, 51, 594, 708, 912, 154, 145, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00016780539590399712, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[10] = { 1231, -438, 250, 401, 139, 309, 45, 88, -336, 943, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00020342291099950671, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[5] = { -41, 290, -391, 194, 165, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00043909077066928148, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[20*55] = { 
  -67, -99, -60, -18, 21, -12, -88, -67, -74, 32, 45, -74, -64, 36, 24, 54, 3, -41, 29, -55, 48, -67, 42, -51, -58, -22, -35, 9, -26, -45, -6, -16, -2, 60, -12, 18, 4, 27, 19, -49, 90, 92, 30, 30, -86, 65, 11, 11, -53, -24, 78, 75, -75, 27, -11, 
  22, 33, 12, 5, -19, 69, 51, 63, -30, 18, 37, -33, -3, -43, -43, -25, -28, -42, 52, 37, -5, -51, -38, -31, 28, -37, 14, 44, -39, 7, 45, 60, -43, -23, -65, 51, -16, 58, 33, -30, -34, 19, 44, 3, -57, -62, 30, 42, 2, -30, 25, 77, -12, -26, 69, 
  -59, -39, -109, -32, -9, -40, -29, -73, -98, 3, -47, 26, -105, -53, 36, -62, -26, -72, 15, -64, 50, -9, -78, -19, -38, 65, -18, -71, -28, -33, -18, 12, -89, 13, -36, 56, -31, -35, -37, -37, 97, -60, -22, -4, 2, 61, 4, -39, 84, -20, 121, -19, -14, -1, 73, 
  -117, -17, -107, -13, -13, -35, -52, -46, -31, 34, -51, -44, -45, -11, -8, -79, 11, -69, 45, 35, -107, -8, 10, -6, -18, 29, 49, -71, 63, 11, -11, 86, -44, -36, -2, 56, 57, -66, -25, 28, 26, 32, -69, 65, -19, -11, 95, -103, 77, 63, 88, 13, -78, 105, -30, 
  -24, 89, -63, 14, -21, 40, 5, -50, -6, -21, 22, 55, -27, -18, -84, 6, 24, -49, 24, -6, 22, 14, -44, 15, -12, -34, 64, 7, 48, -9, -11, -47, -48, 17, -50, -25, 23, 45, -65, -42, 52, -60, -21, -32, -64, 35, 56, 76, 17, 17, 74, -57, 43, -36, 38, 
  33, -82, -24, 10, 0, 17, -34, 13, 23, -34, -42, -78, 50, -3, 74, -6, -65, 13, 67, 84, -41, -40, -52, 8, -14, 3, 33, -73, 61, 36, 6, 86, -44, 79, -3, 15, 9, -40, 77, -19, -28, 29, 17, 43, 3, 15, -51, 23, -11, 17, -38, -10, -36, -41, 19, 
  -61, 27, -24, -36, -26, 4, -21, -30, -42, 28, -68, -108, -79, -61, 56, 0, -78, 16, 3, -16, -10, -63, 47, -67, 19, -26, -17, 5, -19, -33, 4, 27, -33, -36, -63, -40, 67, 60, -3, -59, 43, 54, -37, -31, -43, -16, 101, 81, 36, -15, -5, 68, 74, -35, -106, 
  -56, 25, -78, -47, -40, 29, -10, -94, 22, -52, 25, -47, -80, -50, -47, -11, -39, -84, -25, -23, -11, -90, -88, -38, -13, -39, -14, -2, 4, 48, -8, 21, -74, -22, 15, 77, -80, -8, 41, 19, 68, -85, 23, -35, -47, 111, -9, 27, 5, 0, 127, -11, -54, 69, 23, 
  -9, 7, -5, -103, 70, -2, -43, -41, -18, -36, -97, 33, -24, -53, -72, -73, -16, -40, 24, -9, -45, -28, -48, -57, -36, 27, -36, -23, 24, -22, -35, 64, -68, -1, 16, 12, 24, -11, -77, -12, 25, -41, -34, 18, -25, -15, 59, 67, -92, 55, -87, -2, 61, -50, -24, 
  16, -23, 20, 51, -23, 16, -34, -9, 45, 15, 27, -51, -14, 4, 28, 1, -16, 72, 51, -31, 77, -70, 7, 53, 64, -20, -54, -31, 55, 50, -29, 9, 6, -42, -8, 72, -23, 55, -2, 33, -19, -41, 36, 23, 4, -15, 33, -22, -51, 19, 18, 64, -58, 27, 17, 
  -44, -51, -52, -51, 62, -15, 19, 7, 3, 38, 11, 51, 21, 48, -14, -40, -34, 48, -23, -10, -28, 4, 52, -57, -23, 34, -67, 52, 23, -35, 74, -23, -39, -5, 66, 30, -36, 24, -53, -1, -25, -7, 66, 46, 13, 42, 5, 55, -30, -62, 59, -42, -31, -4, 36, 
  55, 62, 2, -11, -14, 58, 26, 48, 44, 30, -34, 62, 9, -59, -65, 6, 32, 39, 52, 31, 10, 9, 1, 30, 31, -47, 31, 60, -9, 19, -48, 70, -28, 14, 25, -45, 88, 54, 84, -35, -46, 15, -38, -43, -64, -44, -45, 32, -20, -4, -54, 3, 86, 36, 56, 
  -15, 112, -25, -58, -3, -57, 62, -64, -29, 21, -41, 18, -83, 42, 44, -95, 96, -40, -71, -8, -89, 30, 24, -28, -36, -33, -31, -14, 42, -4, 20, -31, -47, 53, -15, -66, -45, -12, -36, 114, -52, 2, 15, 77, 41, -56, 34, -7, 42, 74, -40, -27, 14, 5, 90, 
  -1, 59, -27, 54, -30, -22, 62, -22, 32, 10, 58, 87, 22, -8, -33, 14, 3, -41, 47, 47, -69, 12, 21, 2, -54, 30, 54, 7, 81, -11, -103, 63, 17, 46, 69, -14, 54, -28, 50, -31, -70, 11, 56, -3, -22, -51, 3, 8, 20, 65, -92, 2, 1, 7, 53, 
  -36, -71, 62, -36, 46, -21, 25, 38, 2, 1, -53, -37, -54, -21, 31, -9, -91, -30, -33, -20, 13, -1, -37, 17, 23, -2, -88, -4, -33, -29, 6, -41, 60, 37, 13, -67, 15, 32, -60, -47, -42, -64, 75, -77, -24, -38, 29, -17, 8, -2, -67, 13, 92, -2, -35, 
  -61, 89, -43, 28, -36, 36, -17, -56, 3, 31, -58, 54, -50, -3, 65, -69, 27, 21, 63, 66, 4, 16, -4, -26, -2, -23, 91, 4, 35, 31, -72, -23, -72, 60, 62, -41, -15, 48, 6, 67, 31, -45, 66, -14, -40, 13, -54, 84, -31, 20, -34, 42, 43, 4, -13, 
  -76, -19, 11, -16, 49, -28, -75, -57, -29, 75, -22, -109, -63, -68, -4, 3, -23, 3, -65, 11, -45, -92, -68, 57, 40, 8, -18, -40, 74, 56, 4, 7, -61, 53, 20, 17, 11, -69, -41, 20, 5, 89, -74, -40, 22, 1, 67, 6, 70, 12, 28, 95, -50, 30, -5, 
  -64, 48, -96, -80, 24, -62, 36, 10, -67, -25, -30, 57, -22, -53, -16, -54, 43, -44, -65, 62, -97, 16, 1, -83, 81, -48, -6, 26, 25, 58, -11, 23, -19, 14, -31, -108, 75, 5, -39, 46, -98, 52, -42, 65, 93, 9, 62, 73, 38, -12, -81, 82, -7, 89, 94, 
  -50, -21, 45, 45, 25, 18, 4, -50, -27, -37, -59, -38, 41, 3, -57, 44, -26, -17, -44, -35, 39, -77, -12, 69, -50, -44, 20, 3, -1, 5, 53, 10, 86, -7, 30, 70, 31, 22, -4, 33, 24, -52, 53, -29, 59, 115, -34, 71, 30, 11, 80, -69, 5, -15, 44, 
  -12, 46, 39, 62, -7, -4, -3, -57, 88, 63, -23, 60, -8, 11, 81, 13, 49, -64, 51, 29, -22, 78, 52, -17, 87, 57, 23, 54, -15, -7, -63, -44, 60, 68, 83, 3, 17, -46, 47, 45, -68, -49, 46, 10, 6, -6, -24, 33, -43, -44, 38, 22, -34, -37, -31, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,55 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0043731466867029667, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[10*20] = { 
  -41, -49, 57, 43, 98, -40, -73, 59, -91, -58, 18, -54, 122, 68, -64, 23, -49, 43, 24, 27, 
  -40, 31, -57, 40, -1, 18, 83, -63, -45, -47, 6, -45, -16, 4, -71, -62, -18, 63, 41, -82, 
  -76, 39, 6, -57, 66, -4, 60, -40, 112, 46, -38, -10, 3, -83, 64, 3, -35, 63, -65, -6, 
  -49, 7, -45, -75, 4, 20, 89, 56, 122, -60, 56, 51, -3, -72, 32, 97, 14, 36, 13, -64, 
  -2, 2, -51, -55, -98, 77, -35, -15, -46, 113, -7, -102, -34, 33, -10, 42, 22, -62, 76, 57, 
  12, 68, -75, 40, -48, 16, -7, -39, 59, -86, -79, 97, -24, 80, -61, 77, -50, 6, -68, 83, 
  109, 8, 43, 80, 94, -29, 57, 63, 54, 62, -1, 36, -127, -15, 21, -23, 43, -38, 67, -32, 
  -38, 77, -30, -90, 13, -13, 16, -58, 97, 51, 60, 79, -9, -22, 21, -19, -35, 34, -26, 17, 
  -54, 64, -14, 14, 90, -15, 73, -107, 0, -63, 36, 88, 65, 91, 6, 56, -60, 84, -38, 12, 
  -28, 32, 11, 102, -105, 75, 52, -54, 58, -5, -47, 30, -18, 2, -71, 30, 126, 118, -65, 99, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.005541008897125721, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[5*10] = { 
  -21, 46, -67, -25, -29, 89, -41, -88, 57, -10, 
  67, -126, 32, -15, 54, -20, -91, 23, -96, 30, 
  -127, 26, 65, 40, 19, -19, -8, 105, 89, -79, 
  -118, -32, 38, 30, -25, -8, 73, -93, -82, -17, 
  30, 19, 37, -15, -74, -64, 53, 58, -50, -114, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 5,10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0072583234868943691, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.036712251603603363, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.060494791716337204, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,5 } };
const TfArray<1, float> quant9_scale = { 1, { 0.1174243837594986, } };
const TfArray<1, int> quant9_zero = { 1, { -34 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,5 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 55, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 1100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
