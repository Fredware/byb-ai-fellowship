/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 29.07.2021 02:50:09

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 272;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,55 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0056172092445194721, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[20] = { -285, -469, 5997, 5109, 2655, 2894, 910, 2346, 2416, 978, 3435, 2075, 4270, 3943, 1122, 472, 1119, 4950, 2189, 5925, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const TfArray<1, float> quant1_scale = { 1, { 6.1115242715459317e-05, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[10] = { 2615, -73, 356, 354, 12, -227, 155, 1930, -182, 1670, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00014536354865413159, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[5] = { 519, -81, -744, 4, 111, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00049581442726776004, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[20*55] = { 
  43, -25, 9, 23, -9, 34, -15, -23, -23, 4, 32, -10, -10, 13, 0, 12, 34, 4, 25, -57, 36, -24, 59, -18, -68, 15, -28, 38, -9, -26, -2, -46, 15, 33, 19, -3, -27, 15, 19, 4, 26, 15, 17, 38, -38, 25, 10, 9, 34, -23, 72, 47, -30, 108, -11, 
  3, 3, -1, -12, 4, 23, 14, 20, -22, 16, 12, -15, -7, -23, -16, -11, -12, -23, 16, 10, -3, -16, -22, -16, 6, -16, 4, 10, -16, 0, 19, 21, -26, -7, -25, 20, -12, 12, 15, -14, -16, 1, 3, -2, -23, -27, 3, -3, -7, -16, 14, 22, -26, -15, 21, 
  -54, -14, -47, 33, 8, -15, -1, -3, 6, 8, -6, 15, 15, 13, 6, 39, -7, 28, 51, -24, 109, -10, 13, 49, -10, 110, -19, 9, 60, 2, 67, 3, -10, 72, 11, 79, 12, 7, 50, 30, 88, 29, 3, 62, 43, 70, 54, -20, 73, 14, 70, 23, -39, 31, 21, 
  3, -3, -28, 32, 1, 64, -12, 5, 37, 16, 60, -15, 5, 41, -7, 54, 21, -32, 38, 45, 37, 16, -21, 3, 55, 76, 31, -56, 8, 53, 57, 58, -41, -32, 37, 69, 44, -19, -1, 39, 61, 46, 6, 61, 32, 47, 58, -8, 72, 79, 70, 13, -30, 70, 27, 
  17, 59, 15, 8, 3, 14, 23, -20, -8, 1, -6, 34, -13, -26, -37, -21, 0, 3, 5, -19, -2, -4, 29, 6, -36, -2, 23, 53, 50, -16, 14, -42, 36, 63, -21, 8, -18, 55, 27, -18, 25, -62, 13, 43, -41, 15, -10, 44, 63, -31, 42, -39, 37, 59, -27, 
  -32, -29, -42, -7, 20, 2, -6, 31, -8, -3, -3, -15, 59, 6, 48, 15, 9, 39, 13, 45, -30, 16, 2, 3, 8, -17, 65, -9, 14, 6, -5, 109, -7, 3, -24, 9, 81, -1, -6, -27, 12, 89, 14, -39, 3, 29, 47, 10, -65, 44, -16, 69, -22, -101, 69, 
  63, 28, -2, -11, 16, 63, 14, -1, -31, 35, 3, -11, -15, -23, 42, -52, 22, 31, -13, -38, -78, 36, 50, -42, -40, -65, 55, 26, -48, -39, -43, 43, 3, -45, -15, -45, 39, 32, -48, -23, -2, 17, -5, -65, -14, -7, 46, 43, -15, 19, 42, 49, 42, -26, 26, 
  44, 34, -10, 29, -17, 45, 21, -29, 31, -13, 18, -3, 2, -8, -22, -3, 0, 10, 25, -40, 37, -42, 18, 22, -48, 39, -19, 39, 46, 20, 28, -27, -8, 38, 44, 52, -59, 8, 58, 54, 34, -43, 17, 36, 7, 52, 22, 13, 64, -6, 90, 28, -30, 118, -5, 
  67, 20, 16, -19, 62, 30, 8, 4, 3, 33, -23, 32, 28, 6, 39, -69, 17, 56, 44, 6, -62, -6, 59, 3, -45, -23, -14, 52, 7, -12, -74, 11, 21, -20, 26, -45, 3, 14, -69, 17, -36, -23, -13, -40, 2, -34, 42, 19, -53, 41, -17, 18, 23, -29, 51, 
  37, 22, 27, 19, 11, 0, 20, -9, 1, 29, -15, 5, -1, -11, 24, -47, 12, 68, 26, -43, -6, -28, 81, 25, -32, -26, -22, 59, 33, -9, -42, -24, 55, 0, -2, 0, -26, 47, 4, 22, -35, -32, 29, 22, -6, -19, 25, 10, 12, -15, 32, 50, 6, 80, 3, 
  -27, 37, 9, -10, 36, -14, 46, 17, 64, 25, 19, 64, 4, 67, 19, 0, 7, 26, -21, 50, -40, 22, 36, -62, 44, -35, -15, 43, -33, 6, -39, -21, 19, -40, 24, -42, -38, 42, -52, -19, -74, -54, 49, -36, -10, -55, -62, 51, -70, -35, -71, -72, 40, -79, 11, 
  115, 44, 52, -5, 18, 98, 29, 31, 22, 39, 38, 41, -16, -7, 12, -20, 45, -1, 12, 41, -48, 45, -2, -25, 46, -78, 52, 21, -74, 41, -78, 52, -9, -69, 46, -63, 39, 13, -33, 4, -58, -15, -16, -72, -9, -47, -31, 16, -18, 28, -15, 5, 60, 25, 71, 
  -112, 54, -12, -25, 34, -107, 42, 7, -4, 31, -58, 24, 15, 24, 30, -21, 18, 47, -7, 18, -19, 1, 60, 39, -6, -1, -16, 56, 108, -23, 41, -2, 43, 102, -63, 19, -5, 43, 41, 8, 19, 19, 28, 44, -2, -3, 15, 6, -30, 11, -48, -22, 7, -73, -3, 
  -25, 29, 19, 22, 1, 2, 28, 22, 38, 16, 53, 37, 14, 17, 4, 59, 4, -42, 26, 72, 7, 20, -54, 3, 54, 36, 40, -48, 28, 37, 0, 58, -17, 11, 28, 39, 47, -12, 31, -18, 19, 19, 28, 19, 7, 15, -24, 15, 11, 60, -49, -43, 15, -34, 28, 
  19, 1, 46, -12, 17, -7, 45, 5, -12, -2, -37, 19, -25, -24, -2, -35, -3, 20, -9, -51, -12, 10, 61, 15, -40, 2, -17, 73, 14, -28, 1, -22, 87, 56, 7, -22, -11, 47, 6, -18, 2, -41, 48, 2, -38, 14, 17, 1, 55, -39, 26, 19, 56, 85, -33, 
  69, 39, 0, 6, 11, 84, -4, -19, -20, 28, 8, 28, -29, -13, 29, -78, 43, 4, -11, -6, -84, 56, 6, -57, -35, -88, 109, 11, -68, -10, -85, 60, -17, -41, 25, -48, 45, 23, -57, 10, -5, 9, 38, -54, -18, 0, -1, 49, -37, 28, 20, 52, 41, -11, 55, 
  43, -22, -22, 29, 10, 60, -32, -16, -8, 20, 44, -45, 4, -17, -10, 26, 23, 26, -28, -37, 13, -25, 2, 20, -13, 36, 4, 10, 2, 20, 17, 22, -10, -15, 28, 15, 34, -21, -47, 27, 34, 65, -18, -42, 30, 43, 64, 8, 19, 41, 79, 78, -36, 5, 59, 
  -37, 17, -63, -32, 52, -37, 23, 27, -43, 26, -6, 41, 42, -6, 27, -38, 41, 51, -25, 8, -78, 52, 61, -1, -14, -48, 76, 65, 62, -37, -8, 106, 37, 51, -62, -25, 107, 28, -13, -20, -6, 72, -7, -22, 17, 39, 65, 30, -58, -3, -5, 78, -10, -56, 78, 
  6, 32, 75, 38, 10, 32, 37, -16, 27, -11, -3, 8, 3, 6, -24, 62, -5, -21, 4, 18, 80, -31, -18, 31, 13, 38, -18, -13, 16, 33, 57, -48, 28, 25, 37, 46, -48, 14, 41, 38, 5, -65, 28, 49, 36, 39, -59, 33, 75, -11, 26, -66, 7, 64, -37, 
  -127, 23, 7, 19, 30, -63, 11, 22, 35, 48, -8, 38, 67, 18, 59, 61, 14, 66, 34, 50, 36, 31, 86, 30, 67, 52, 22, 75, 50, -13, 6, 18, 55, 61, -15, 35, 60, 4, 46, -20, 4, 34, 18, -4, -12, 14, 27, 5, -67, -7, -16, 33, -39, -96, 4, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,55 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0108800008893013, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[10*20] = { 
  1, -1, 58, 50, 67, -3, -64, 51, -72, -27, -31, -88, 74, 70, -6, -61, -11, 12, 69, 33, 
  -24, 4, -19, 13, 8, 2, 24, -16, -13, -26, 5, -27, -8, -12, -27, -31, -15, 22, 16, -31, 
  27, 23, 10, -35, 80, 2, 45, 10, 127, 95, -24, -15, 48, -53, 101, -2, -11, 58, -26, 22, 
  1, -5, -29, -36, 4, 50, 84, 30, 89, 3, 48, 92, -7, -26, 20, 100, 36, 47, -55, -13, 
  5, 2, -21, -29, -31, 31, -10, -3, -15, 36, 3, -32, -28, 16, -2, 9, 5, -31, 35, 11, 
  19, 29, -29, 3, -28, -9, -2, -10, 28, -36, -40, 30, -27, 13, -20, 25, -31, -6, -32, 22, 
  61, -9, 20, 48, 56, -42, 33, 52, 16, 56, -12, 88, -82, -14, 37, 42, 32, -8, 42, -26, 
  -75, 31, -48, -65, 13, 14, -9, -60, 64, 33, 89, 70, 43, 42, 9, -9, -86, 22, 5, 55, 
  -91, 24, -24, 2, 23, 27, 59, -71, -2, -58, 79, 80, 28, 60, -23, 71, -43, 47, -31, 2, 
  -28, 11, 33, 61, -76, 105, 45, -31, 27, -45, -80, -24, -4, 25, -91, 0, 91, 78, -77, 65, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.012190473265945911, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[5*10] = { 
  22, -4, -112, -18, -12, 26, -22, -36, 44, 23, 
  31, -38, 44, -43, 13, 5, -74, -84, -127, 5, 
  -122, 35, 24, 32, 18, -2, -37, 86, 74, -84, 
  -76, 2, 44, 56, -6, 2, 44, -95, -50, 7, 
  18, 34, 19, -33, -30, -23, 49, 30, -15, -113, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 5,10 } };
const TfArray<1, float> quant6_scale = { 1, { 0.014629881829023361, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.01192435622215271, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.033890530467033386, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,5 } };
const TfArray<1, float> quant9_scale = { 1, { 0.1725032776594162, } };
const TfArray<1, int> quant9_zero = { 1, { 23 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,5 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 55, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 1100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
